{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import os \n",
    "import yaml \n",
    "import datetime \n",
    "import yaml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lecture du fichier d'environnement\n",
    "ENV_FILE = '../src/env.yaml'\n",
    "with open(ENV_FILE) as f:\n",
    "    params = yaml.load(f, Loader=yaml.FullLoader)\n",
    "\n",
    "# Initialisation des chemins vers les fichiers\n",
    "ROOT_DIR = os.path.dirname(os.path.abspath(ENV_FILE))\n",
    "DATA_FILE = os.path.join(ROOT_DIR,\n",
    "                         params['directories']['processed'],\n",
    "                         params['files']['all_data'])\n",
    "\n",
    "# Lecture du fichier de donn√©es\n",
    "epidemie_df = (pd.read_csv(DATA_FILE, parse_dates=['Last Update'])\n",
    "               .assign(day=lambda _df: _df['Last Update'].dt.date)\n",
    "               .drop_duplicates(subset=['Country/Region', 'Province/State', 'day'])\n",
    "               [lambda df: df['day'] <= datetime.date(2020, 3, 12)]\n",
    "              )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>France</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>France</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>France</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>France</td>\n",
       "      <td>2020-01-27</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>2020-01-28</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0         France  2020-01-24        2.0     0.0        0.0\n",
       "1         France  2020-01-25        3.0     0.0        0.0\n",
       "2         France  2020-01-26        3.0     0.0        0.0\n",
       "3         France  2020-01-27        3.0     0.0        0.0\n",
       "4         France  2020-01-28        4.0     0.0        0.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "france_df=(epidemie_df[epidemie_df['Country/Region']=='France']\n",
    "            .groupby(['Country/Region','day'])\n",
    "            .agg({'Confirmed': 'sum', 'Deaths':'sum', 'Recovered': 'sum'})\n",
    "            .reset_index()\n",
    "            )\n",
    "france_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0    South Korea  2020-01-22        1.0     0.0        0.0\n",
       "1    South Korea  2020-01-23        1.0     0.0        0.0\n",
       "2    South Korea  2020-01-24        2.0     0.0        0.0\n",
       "3    South Korea  2020-01-25        2.0     0.0        0.0\n",
       "4    South Korea  2020-01-26        3.0     0.0        0.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "korea_df=(epidemie_df[epidemie_df['Country/Region']=='South Korea']\n",
    "            .groupby(['Country/Region','day'])\n",
    "            .agg({'Confirmed': 'sum', 'Deaths':'sum', 'Recovered': 'sum'})\n",
    "            .reset_index()\n",
    "            )\n",
    "korea_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Italy</td>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Italy</td>\n",
       "      <td>2020-02-07</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Italy</td>\n",
       "      <td>2020-02-21</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Italy</td>\n",
       "      <td>2020-02-22</td>\n",
       "      <td>62.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Italy</td>\n",
       "      <td>2020-02-23</td>\n",
       "      <td>155.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0          Italy  2020-01-31        2.0     0.0        0.0\n",
       "1          Italy  2020-02-07        3.0     0.0        0.0\n",
       "2          Italy  2020-02-21       20.0     1.0        0.0\n",
       "3          Italy  2020-02-22       62.0     2.0        1.0\n",
       "4          Italy  2020-02-23      155.0     3.0        2.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "italy_df=(epidemie_df[epidemie_df['Country/Region']=='Italy']\n",
    "            .groupby(['Country/Region','day'])\n",
    "            .agg({'Confirmed': 'sum', 'Deaths':'sum', 'Recovered': 'sum'})\n",
    "            .reset_index()\n",
    "            )\n",
    "italy_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_country(self,country):\n",
    "    return (epidemie_df[epidemie_df['Country/Region']==country]\n",
    "            .groupby(['Country/Region','day'])\n",
    "            .agg({'Confirmed': 'sum', 'Deaths':'sum', 'Recovered': 'sum'})\n",
    "            .reset_index()\n",
    "            )\n",
    "\n",
    "#Monkey match pd.Dataframe\n",
    "pd.DataFrame.get_country = get_country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0    South Korea  2020-01-22        1.0     0.0        0.0\n",
       "1    South Korea  2020-01-23        1.0     0.0        0.0\n",
       "2    South Korea  2020-01-24        2.0     0.0        0.0\n",
       "3    South Korea  2020-01-25        2.0     0.0        0.0\n",
       "4    South Korea  2020-01-26        3.0     0.0        0.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_country(epidemie_df,'South Korea').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0    South Korea  2020-01-22        1.0     0.0        0.0\n",
       "1    South Korea  2020-01-23        1.0     0.0        0.0\n",
       "2    South Korea  2020-01-24        2.0     0.0        0.0\n",
       "3    South Korea  2020-01-25        2.0     0.0        0.0\n",
       "4    South Korea  2020-01-26        3.0     0.0        0.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "epidemie_df.get_country('South Korea').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "korea_df['infected'] = korea_df['Confirmed'].diff() \n",
    "italy_df['infected'] = italy_df['Confirmed'].diff() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline\n",
    "\n",
    "fig= plt.figure(figsize=(12,9))\n",
    "plt.plot(korea_df['day'], korea_df['Confirmed'], label='S.Korea confirmed')\n",
    "plt.plot(korea_df['day'], korea_df['infected'], label= 'S.Korea infected')\n",
    "plt.plot(italy_df['day'], italy_df['Confirmed'], label= ' Italyted confirmed')\n",
    "plt.plot(italy_df['day'], italy_df['infected'], label= ' Italyted infected')\n",
    "\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta,gamma = [0.01,0.1]\n",
    "\n",
    "def SIR(t,y):\n",
    "    S = y[0]\n",
    "    I = y[1]\n",
    "    R = y[2]\n",
    "    return([-beta*S*I, beta*S*I-gamma*I, gamma*I])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.integrate import solve_ivp\n",
    "\n",
    "sol = solve_ivp(SIR,[0,42],[51_470_000,1,0],t_eval=np.arange(0, 40, 1)) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    " def plot_epidemia(solution, infected):\n",
    "        \n",
    "    fig = plt.figure(figsize=(12,5))\n",
    "    \n",
    "    plt.plot(solution.t, solution.y[0],\"b-\")\n",
    "    plt.plot(solution.t, solution.y[1],\"r-\")\n",
    "    plt.plot(solution.t, solution.y[2],\"g-\")\n",
    "    plt.plot(infected.reset_index(drop=True), infected,\"k*:\")\n",
    "    plt.xlim(0,40)\n",
    "    plt.legend([\"Susceptible\",\"Infected\",\"Removed\",\"Original Data\"], fontsize=14)\n",
    "    plt.grid('True')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta,gamma = [0.01,0.1]\n",
    "solution_korea = solve_ivp(SIR,[0,42],[51_470_000,1,0],t_eval=np.arange(0, 41, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_epidemia(solution_korea,korea_df.loc[2:]['infected'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sumsq_error(parameters):\n",
    "    beta, gamma = parameters\n",
    "    def SIR(t,y):\n",
    "        S = y[0]\n",
    "        I = y[1]\n",
    "        R = y[2]\n",
    "        return([-beta*S*I, beta*S*I-gamma*I, gamma*I])\n",
    "    sol = solve_ivp(SIR,[0,nb_steps],[total_population, 1, 0],t_eval=np.arange(nb_steps,1))\n",
    "    return(sum((sol.y[1]-infected_population)**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_population = 51_470_000\n",
    "infected_population = korea_df.loc[2:]['infected']\n",
    "nb_steps = len(infected_population)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(infected_population)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 0 ns\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "need at least one array to concatenate",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-19-fd14a79398ad>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptimize\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mminimize\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mmsol\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mminimize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msumsq_error\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m0.001\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0.1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Nelder-Mead'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[0mmsol\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\.conda\\envs\\corona\\lib\\site-packages\\scipy\\optimize\\_minimize.py\u001b[0m in \u001b[0;36mminimize\u001b[1;34m(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)\u001b[0m\n\u001b[0;32m    596\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    597\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mmeth\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'nelder-mead'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 598\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_minimize_neldermead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0moptions\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    599\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0mmeth\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'powell'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    600\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_minimize_powell\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0moptions\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\.conda\\envs\\corona\\lib\\site-packages\\scipy\\optimize\\optimize.py\u001b[0m in \u001b[0;36m_minimize_neldermead\u001b[1;34m(func, x0, args, callback, maxiter, maxfev, disp, return_all, initial_simplex, xatol, fatol, adaptive, **unknown_options)\u001b[0m\n\u001b[0;32m    584\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    585\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 586\u001b[1;33m         \u001b[0mfsim\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msim\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    587\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    588\u001b[0m     \u001b[0mind\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfsim\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\.conda\\envs\\corona\\lib\\site-packages\\scipy\\optimize\\optimize.py\u001b[0m in \u001b[0;36mfunction_wrapper\u001b[1;34m(*wrapper_args)\u001b[0m\n\u001b[0;32m    325\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mwrapper_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    326\u001b[0m         \u001b[0mncalls\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 327\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwrapper_args\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    328\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    329\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mncalls\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-16-bd243ac1ee14>\u001b[0m in \u001b[0;36msumsq_error\u001b[1;34m(parameters)\u001b[0m\n\u001b[0;32m      6\u001b[0m         \u001b[0mR\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m         \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mbeta\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mS\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mI\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbeta\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mS\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mI\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mgamma\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mI\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mgamma\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mI\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m     \u001b[0msol\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msolve_ivp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mSIR\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mnb_steps\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtotal_population\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mt_eval\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnb_steps\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m     \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msol\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0minfected_population\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\.conda\\envs\\corona\\lib\\site-packages\\scipy\\integrate\\_ivp\\ivp.py\u001b[0m in \u001b[0;36msolve_ivp\u001b[1;34m(fun, t_span, y0, method, t_eval, dense_output, events, vectorized, args, **options)\u001b[0m\n\u001b[0;32m    649\u001b[0m         \u001b[0mys\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mys\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    650\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 651\u001b[1;33m         \u001b[0mts\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mts\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    652\u001b[0m         \u001b[0mys\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mys\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    653\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mhstack\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;32m~\\.conda\\envs\\corona\\lib\\site-packages\\numpy\\core\\shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[1;34m(tup)\u001b[0m\n\u001b[0;32m    343\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    344\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 345\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    346\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    347\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mconcatenate\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: need at least one array to concatenate"
     ]
    }
   ],
   "source": [
    "%time\n",
    "from scipy.optimize import minimize\n",
    "\n",
    "msol = minimize(sumsq_error, [0.001, 0.1], method='Nelder-Mead')\n",
    "msol.x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta_optimal= 5.67e-3\n",
    "gamma_optimal = 24.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta= beta_optimal\n",
    "gamma = gamma_optimal\n",
    "solution_korea_optimal = solve_ivp(SIR,[0,42],[51_470_000,1,0],t_eval=np.arange(0, 41, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_epidemia(solution_korea_optimal,korea_df.loc[2:]['infected'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "    fig = plt.figure(figsize=(12,5))\n",
    "    plt.plot(solution_korea_optimal.t, solution_korea_optimal.y[1])\n",
    "    plt.plot(korea_df.loc[2:]['infected'].reset_index(drop=True).index, korea_df.loc[2:]['infected'],\"k*:\")\n",
    "    plt.grid('True') \n",
    "    plt.legend([\"Infected\",\"Original Data\"])\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>day</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>547.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>639.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>916.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>1399.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>2062.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country/Region         day  Confirmed  Deaths  Recovered\n",
       "0  Mainland China  2020-01-22      547.0    17.0       28.0\n",
       "1  Mainland China  2020-01-23      639.0    18.0       30.0\n",
       "2  Mainland China  2020-01-24      916.0    26.0       36.0\n",
       "3  Mainland China  2020-01-25     1399.0    42.0       39.0\n",
       "4  Mainland China  2020-01-26     2062.0    56.0       49.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "china_df= epidemie_df.get_country('Mainland China')\n",
    "china_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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lpby+eefc9FFF9XGUVX1/VawF110EW63uzaOefPm8fDDDwNQWVnJtm3bWLRoETfffDMAGRkZZGRkNNpnJCLSlGTmBeugP1y3m7SkOJ68fAhn9e8Q9v1tRZqqmhnpo+lq09REbCJd35njhlZTI11cXMy5557LE088wc0334y1ll//+tdMnz59n+NnzpxZr7+sa445//zz+fWvf01BQQErVqxg3LhxlJWV0bp169ra7P21aNGi9rG1ln/961/07t37B3+GiEhzUFzh5fGPNzL78yyi3S5+NbE314zuphIOkUYW4wn+Gavyhv9iQ9VIN5LExERmzpzJww8/jNfrZcKECcyaNYvS0lIAduzYwZ49ezj99NN57bXXyM/PB6gt7Rg1ahRz584FYM6cOYwZMwaAli1bMmLECG655RbOPfdc3G43CQkJdOvWjddffx0IJsurVq06aFwTJkzgsccew9pgY/Svv/4agFNOOYU5c+YAsGbNGlavXt0YH4uIiGMKy6r5ZMMe/jr/W37+/JeM+uMCnv8sk58OTuOTX45lxtieSqJFjoNozUhLfQwePJiBAwcyd+5crrjiCtavX89JJ50EBBPil19+mX79+vGb3/yGU089FbfbzeDBg5k9ezYzZ87kmmuu4aGHHqJt27a88MILtde9+OKLueiii1i4cGHt2Jw5c7j++uv5/e9/j9fr5ZJLLmHgwIEHxHTvvfdy6623kpGRgbWW9PR03nnnHa6//nquvvpqMjIyGDRoECNGjGj0z0dEpLH4/AE27NrL19u/3147M68MALfLcEKHVvx0SBoXD+9M/1TVQYscT7WLDb3hn0ibmpnJcDNs2DC7fPnyfcbWr19Pnz59HIqoedBnLCJNjbWWPXurWLW9iK+3F/HV1kJWZxdTEfraOKVlDEO6tGZwl+AugRlpicRHax5JxCk7iys46Y8f88efDuDSEV2cDuewjDErrLUH3VhDf5OIiEjYsNaSXVjBmh3FrMkpZm1OCWt2lJBXGlxg7XEZ+nVK4OLhnRncpTVDuiSRlhSnNSAiTUi0W107REREGlUgYMnML2PNjpqEOXhfXOEFgiUavdq1ZGzvtvTvlED/1ET6pyaqzlmkiYsJ/RnVzoYiIiINoLzax4Zde9mwcy/rd5bU3sqqg//QRntc9OnQirMHdKR/agL9OyXSu0MrJc0iYUgz0k2Y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\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "china_df.set_index('day').plot.line(figsize=(12,9));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Projet Corona (Python)",
   "language": "python",
   "name": "corona"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
